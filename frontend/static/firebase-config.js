// ========================================
// CONFIGURACI√ìN DE FIREBASE AXYRA
// ========================================

// Configuraci√≥n de Firebase para AXYRA
const firebaseConfig = {
  // üîë API Key de Firebase - REEMPLAZAR CON TU CONFIGURACI√ìN REAL
  apiKey: "AIzaSyDZIgISusap5LecwLzdXR9AhqjH3QiASSY",
  
  // üåê Dominio de autenticaci√≥n
  authDomain: "axyra-32d95.firebaseapp.com",
  
  // üìÅ ID del proyecto
  projectId: "axyra-32d95",
  
  // üóÑÔ∏è Bucket de almacenamiento
  storageBucket: "axyra-32d95.firebasestorage.app",
  
  // üì± ID del remitente de mensajes
  messagingSenderId: "105198865804",
  
  // üÜî ID de la aplicaci√≥n
  appId: "1:105198865804:web:2656885e240ad6a4bedaa9",
  
  // üìä ID de medici√≥n (opcional)
  measurementId: "G-Y6H4Y6QX1G"
};

// Inicializar Firebase cuando el SDK est√© disponible
function initializeFirebase() {
  if (typeof firebase !== 'undefined') {
    try {
      // Verificar si ya est√° inicializado
      if (firebase.apps.length === 0) {
        firebase.initializeApp(firebaseConfig);
        console.log('üî• Firebase AXYRA inicializado correctamente');
      } else {
        console.log('üî• Firebase ya estaba inicializado');
      }
      
      // Inicializar servicios
      const firebaseAuth = firebase.auth();
      const firebaseFirestore = firebase.firestore();
      
      // Configurar Firestore
      firebaseFirestore.settings({
        cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED
      });
      
      // Exportar para uso global
      window.axyraFirebase = {
        auth: firebaseAuth,
        firestore: firebaseFirestore,
        config: firebaseConfig
      };
      
      console.log('‚úÖ Servicios de Firebase disponibles');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error inicializando Firebase:', error);
      return false;
    }
  } else {
    console.error('‚ùå Firebase SDK no est√° disponible');
    return false;
  }
}

// Intentar inicializar inmediatamente
let firebaseInitialized = initializeFirebase();

// Si no se pudo inicializar, intentar cuando est√© disponible
if (!firebaseInitialized) {
  // Esperar a que Firebase se cargue
  const checkFirebase = setInterval(() => {
    if (typeof firebase !== 'undefined') {
      firebaseInitialized = initializeFirebase();
      if (firebaseInitialized) {
        clearInterval(checkFirebase);
        console.log('üî• Firebase inicializado despu√©s de esperar');
      }
    }
  }, 100);
}

// ========================================
// FUNCIONES DE AUTENTICACI√ìN FIREBASE
// ========================================

// Funci√≥n para verificar si Firebase est√° disponible
function isFirebaseAvailable() {
  return typeof firebase !== 'undefined' && firebase.auth && window.axyraFirebase;
}

// Funci√≥n para obtener el usuario actual de Firebase
function getCurrentFirebaseUser() {
  if (isFirebaseAvailable()) {
    return firebase.auth().currentUser;
  }
  return null;
}

// Funci√≥n para verificar si hay un usuario autenticado
function isFirebaseUserAuthenticated() {
  const user = getCurrentFirebaseUser();
  return user !== null;
}

// Funci√≥n para hacer logout de Firebase
async function firebaseLogout() {
  if (isFirebaseAvailable()) {
    try {
      await firebase.auth().signOut();
      console.log('‚úÖ Logout de Firebase exitoso');
      
      // Limpiar localStorage
      localStorage.removeItem('axyra_firebase_user');
      localStorage.removeItem('axyra_isolated_user');
      
      return true;
    } catch (error) {
      console.error('‚ùå Error en logout de Firebase:', error);
      return false;
    }
  }
  return false;
}

// Funci√≥n para obtener informaci√≥n del usuario
function getFirebaseUserInfo() {
  const user = getCurrentFirebaseUser();
  if (user) {
    return {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      photoURL: user.photoURL,
      emailVerified: user.emailVerified,
      providerData: user.providerData
    };
  }
  return null;
}

// Funci√≥n para crear usuario en Firestore
async function createFirebaseUser(userData) {
  if (isFirebaseAvailable() && userData) {
    try {
      await window.axyraFirebase.firestore
        .collection('users')
        .doc(userData.uid)
        .set(userData, { merge: true });
      
      console.log('‚úÖ Usuario creado en Firestore:', userData.email);
      return true;
    } catch (error) {
      console.error('‚ùå Error creando usuario en Firestore:', error);
      return false;
    }
  }
  return false;
}

// Exportar funciones para uso global
window.axyraFirebaseUtils = {
  isAvailable: isFirebaseAvailable,
  getCurrentUser: getCurrentFirebaseUser,
  isAuthenticated: isFirebaseUserAuthenticated,
  logout: firebaseLogout,
  getUserInfo: getFirebaseUserInfo,
  createUser: createFirebaseUser,
  initialize: initializeFirebase
};
